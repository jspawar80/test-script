name: Build and Push to ECR and Deploy to ECS

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: lynk-api
  TASK_DEFINITION: lynk-api-prod
  SERVICE_NAME: lynk-api-prod
  CLUSTER_NAME: lynk-api-prod

jobs:
  build-and-push:
    name: Build and push Docker image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
 

    - name: Get latest image tag from ECR
      id: ecr
      run: |
        REPO_NAME="lynk-api"
        AWS_REGION="us-east-1"
        IMAGE_TAG=$(aws ecr list-images --repository-name ${REPO_NAME} --region ${AWS_REGION} --query 'sort_by(imageIds,&imageTag)[-1].imageTag' --output text)
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV   

    - name: Get current task definition
      id: ecs
      run: |
        TASK_FAMILY="lynk-api-prod"
        aws ecs describe-task-definition --task-definition ${TASK_FAMILY} | jq -r '.taskDefinition | {family: .family, executionRoleArn: .executionRoleArn, networkMode: .networkMode, volumes: .volumes, placementConstraints: .placementConstraints, requiresCompatibilities: .requiresCompatibilities, cpu: .cpu, memory: .memory, containerDefinitions: .containerDefinitions}' > task-definition.json

        if [ "$(jq -r '.taskRoleArn' task-definition.json)" == "null" ]; then
            jq -r 'del(.taskRoleArn)' task-definition.json > temp.json && mv temp.json task-definition.json
        fi

    - name: Update task definition with latest image tag
      run: |
        jq -r --arg IMAGE_TAG ${IMAGE_TAG} '.containerDefinitions[0].image = "740960784154.dkr.ecr.us-east-1.amazonaws.com/'${REPO_NAME}':'${IMAGE_TAG}'"' task-definition.json > new-task-definition.json

    - name: Register a new revision of the task definition
      run: |
        aws ecs register-task-definition --cli-input-json file://new-task-definition.json
        
    - name: Update ECS service
      run: |
        aws ecs update-service --cluster ${{ env.CLUSTER_NAME }} --service ${{ env.SERVICE_NAME }} --task-definition $TASK_DEFINITION --desired-count 0
        sleep 60 # wait for tasks to stop
        aws ecs update-service --cluster ${{ env.CLUSTER_NAME }} --service ${{ env.SERVICE_NAME }} --task-definition $TASK_DEFINITION --desired-coun 1

