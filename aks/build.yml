name: Build AKS cluster

on:
  workflow_dispatch:
    inputs:
      resource_group_name:
        default: "gh-aks-services"
        description: "Azure Resource Group"
        required: false
      node_resource_group:
        default: "gh-aks-infrastructure"
        description: "Node Resource Group for AKS Infrastructure"
        required: false
      aks_cluster_name:
        default: "gh-aks-cluster"
        description: "AKS cluster name"
        required: false
      location:
        default: "eastus"
        description: "Azure region"
        required: false
jobs:
  Terraform:
    name: Terraform AKS Cluster
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.4.6
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform -chdir=tf-files init

      - name: Terraform Validate
        run: terraform -chdir=tf-files validate

      - name: Terraform Plan
        if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
        run: TF_VAR_client_id=${{ secrets.AZURE_CLIENT_ID }} TF_VAR_subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }} TF_VAR_tenant_id=${{ secrets.AZURE_TENANT_ID }} TF_VAR_client_secret=${{ secrets.AZURE_CLIENT_SECRET }} TF_VAR_resource_group_name=${{ github.event.inputs.resource_group_name }} TF_VAR_aks_cluster_name=${{ github.event.inputs.aks_cluster_name }} TF_VAR_location=${{ github.event.inputs.location }} terraform -chdir=tf-files plan -out=tfplan -input=false -no-color

      - name: Terraform Apply
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
        run: |
          TF_VAR_client_id=${{ secrets.AZURE_CLIENT_ID }} TF_VAR_subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }} TF_VAR_tenant_id=${{ secrets.AZURE_TENANT_ID }} TF_VAR_client_secret=${{ secrets.AZURE_CLIENT_SECRET }} TF_VAR_resource_group_name=${{ github.event.inputs.resource_group_name }} TF_VAR_aks_cluster_name=${{ github.event.inputs.aks_cluster_name }} TF_VAR_location=${{ github.event.inputs.location }} terraform -chdir=tf-files apply -auto-approve
          echo "::set-output name=resource_group_name::$(terraform output -raw resource_group_name)"
          echo "::set-output name=cluster_name::$(terraform output -raw cluster_name)"

  Kubernetes:
    name: Deploy Kubernetes
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: Azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ github.event.inputs.resource_group_name }}
          cluster-name: ${{ github.event.inputs.aks_cluster_name }}

      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
          echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          kubectl version --client
          kubectl cluster-info

      - name: Install actions-runner-controller
        run: |
          NAMESPACE="gh-aks-cluster"
          helm upgrade --install arc \
              --namespace "${NAMESPACE}" \
              --create-namespace \
              oci://ghcr.io/actions/actions-runner-controller-charts/gha-runner-scale-set-controller

      - name: Install autoscaling runner set
        run: |
          INSTALLATION_NAME="gh-aks-runners"
          NAMESPACE="arc-runners"
          helm upgrade --install "${INSTALLATION_NAME}" \
              -f ./manifest/arc_values.yaml \
              --set githubConfigSecret.github_token="${{ secrets.GH_TOKEN_ORG }}" \
              --namespace "${NAMESPACE}" \
              --create-namespace \
              oci://ghcr.io/actions/actions-runner-controller-charts/gha-runner-scale-set

      - name: Check namespace and pods
        run: |
          sleep 30
          helm list -A
          kubectl get pods -n gh-aks-cluster
          kubectl get pods --all-namespaces
          kubectl get nodes 
name: Build AKS cluster

on:
  workflow_dispatch:
    inputs:
      resource_group_name:
        default: "gh-aks-services"
        description: "Azure Resource Group"
        required: false
      node_resource_group:
        default: "gh-aks-infrastructure"
        description: "Node Resource Group for AKS Infrastructure"
        required: false
      aks_cluster_name:
        default: "gh-aks-cluster"
        description: "AKS cluster name"
        required: false
      location:
        default: "eastus"
        description: "Azure region"
        required: false
jobs:
  Terraform:
    name: Terraform AKS Cluster
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.4.6
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform -chdir=tf-files init

      - name: Terraform Validate
        run: terraform -chdir=tf-files validate

      - name: Terraform Plan
        if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
        run: TF_VAR_client_id=${{ secrets.AZURE_CLIENT_ID }} TF_VAR_subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }} TF_VAR_tenant_id=${{ secrets.AZURE_TENANT_ID }} TF_VAR_client_secret=${{ secrets.AZURE_CLIENT_SECRET }} TF_VAR_resource_group_name=${{ github.event.inputs.resource_group_name }} TF_VAR_aks_cluster_name=${{ github.event.inputs.aks_cluster_name }} TF_VAR_location=${{ github.event.inputs.location }} terraform -chdir=tf-files plan -out=tfplan -input=false -no-color

      - name: Terraform Apply
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
        run: |
          TF_VAR_client_id=${{ secrets.AZURE_CLIENT_ID }} TF_VAR_subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }} TF_VAR_tenant_id=${{ secrets.AZURE_TENANT_ID }} TF_VAR_client_secret=${{ secrets.AZURE_CLIENT_SECRET }} TF_VAR_resource_group_name=${{ github.event.inputs.resource_group_name }} TF_VAR_aks_cluster_name=${{ github.event.inputs.aks_cluster_name }} TF_VAR_location=${{ github.event.inputs.location }} terraform -chdir=tf-files apply -auto-approve
          echo "::set-output name=resource_group_name::$(terraform output -raw resource_group_name)"
          echo "::set-output name=cluster_name::$(terraform output -raw cluster_name)"

  Kubernetes:
    name: Deploy Kubernetes
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: Azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ github.event.inputs.resource_group_name }}
          cluster-name: ${{ github.event.inputs.aks_cluster_name }}

      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
          echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          kubectl version --client
          kubectl cluster-info

      - name: Install actions-runner-controller
        run: |
          NAMESPACE="gh-aks-cluster"
          helm upgrade --install arc \
              --namespace "${NAMESPACE}" \
              --create-namespace \
              oci://ghcr.io/actions/actions-runner-controller-charts/gha-runner-scale-set-controller

      - name: Install autoscaling runner set
        run: |
          INSTALLATION_NAME="gh-aks-runners"
          NAMESPACE="arc-runners"
          helm upgrade --install "${INSTALLATION_NAME}" \
              -f ./manifest/arc_values.yaml \
              --set githubConfigSecret.github_token="${{ secrets.GH_TOKEN_ORG }}" \
              --namespace "${NAMESPACE}" \
              --create-namespace \
              oci://ghcr.io/actions/actions-runner-controller-charts/gha-runner-scale-set

      - name: Check namespace and pods
        run: |
          sleep 30
          helm list -A
          kubectl get pods -n gh-aks-cluster
          kubectl get pods --all-namespaces
          kubectl get nodes 
